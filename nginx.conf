events {
    worker_connections 1024;
}

http {
    upstream backend {
        server backend:8001;
    }

    upstream frontend {
        server frontend:80;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name parkon.app www.parkon.app api.parkon.app;
        return 301 https://$server_name$request_uri;
    }

    # Main app - parkon.app
    server {
        listen 443 ssl http2;
        server_name parkon.app www.parkon.app;

        ssl_certificate /etc/ssl/certs/parkon.app.crt;
        ssl_certificate_key /etc/ssl/certs/parkon.app.key;

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # PWA Service Worker
        location /sw.js {
            proxy_pass http://frontend;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Manifest file
        location /manifest.json {
            proxy_pass http://frontend;
            add_header Content-Type "application/manifest+json";
        }
    }

    # API subdomain - api.parkon.app
    server {
        listen 443 ssl http2;
        server_name api.parkon.app;

        ssl_certificate /etc/ssl/certs/parkon.app.crt;
        ssl_certificate_key /etc/ssl/certs/parkon.app.key;

        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS headers
            add_header Access-Control-Allow-Origin "https://parkon.app" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            add_header Access-Control-Allow-Credentials "true" always;

            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
    }
}